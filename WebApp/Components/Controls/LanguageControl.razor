@using TranslateWebApp.Interfaces
@inject IDataContext data

@if (data.TargetLanguages.Count > 0)
{
    <div class="btn-group w-100 mt-2">
        <button class="btn btn-sm btn-secondary disabled twa-first-button">Target</button>
        @foreach (var e in data.TargetLanguages)
        {
            <button class="btn btn-sm @CssBtnTarget(e.LangKey)" title="@e.EnglishName" @onclick="@(() => SetTargetLanguage(e.LangKey))">@e.ShortName</button>
        }
    </div>
}

@if ( data.SupportLanguages.Count > 0 &&  ShowHelper)
{
    <div class="btn-group w-100 mt-2">
        <button class="btn btn-sm btn-secondary disabled twa-first-button">Support</button>
        @foreach (var e in data.SupportLanguages)
        {
            <button class="btn btn-sm @CssBtnSecondary(e.LangKey)" @onclick="@(() => SelectSecondary(e.LangKey))">@e.ShortName</button>
        }
    </div>
}

@code {

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public bool ShowHelper { get; set; }

    private async Task SendToParent()
    {
        await OnClick.InvokeAsync();
    }

    private async Task SelectSecondary(string helperLanguage)
    {
        if (helperLanguage != data.HelperLanguage)
        {
            data.HelperLanguage = helperLanguage;
            await OnClick.InvokeAsync();
        }
    }

    private async Task SetTargetLanguage(string targetLanguage)
    {
        if (targetLanguage != data.TargetLanguage)
        {
            data.TargetLanguage = targetLanguage;
            await OnClick.InvokeAsync();
        }
    }

    private string CssBtnTarget(string btnLang)
    {
        if (btnLang == data.TargetLanguage)
            return "btn-primary active";
        else
            return "btn-outline-primary";
    }

    private string CssBtnSecondary(string btnLang)
    {
        if (btnLang == data.HelperLanguage)
            return "btn-primary active";
        else
            return "btn-outline-primary";
    }

}
