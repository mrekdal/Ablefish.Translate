@page "/Conflicts"
@using TranslateWebApp.Interfaces
@inject ILogger<Home> logger
@inject IDataContext data
@inject IWebUser appUser
@inject IStatusMessage statusMessage
@inject IStatusMessage statusMessageApprove

<PageTitle>Conflicts</PageTitle>

<MenuBar />


<div class="card shadow mt-2">
    <div class="card-header">
        <span>Conflict Resolution</span>
        <span style="float:right;">Welcome: <b>@appUser.FirstName</b></span>
    </div>
    <div class="card-body">
        <div class="m-1">
            @if (data.UserProjects.Count > 0)
            {
                <div>
                    Choose your project and language.
                </div>
            }
            else
            {
                <div>Click the <b>Start Working</b> button to find translation conflicts in your projects.</div>
                <div class="text-center mt-2">
                    <button class="btn btn-lg btn-success" @onclick="@(() => ClickStart())">Start Working</button>
                </div>
            }
        </div>
        <ProjectControl OnClick="RunQuery" />
        <LanguageControl OnClick="RunQuery" ShowHelper=false />
    </div>
    @if (!statusMessage.IsEmpty)
    {
        <div class="card-footer">
            <StatusBox StatusMessage="statusMessage" />
        </div>
    }
</div>

@if (allConflicts != null && allConflicts.Items.Count > 0)
{
    rowNo = 0;
    int visibleRows = 0;
    <div class="card shadow mt-2">
        <div class="card-header">
            <span><b>Work Items</b> with conflicts</span>
            <span class="text-end" style="float: right;">Project #<b>@data.ProjectId</b></span>
        </div>
        <div class="card-body">
            <table class="table table-sm">
                <tbody>
                    @foreach (var e in allConflicts.Items)
                    {
                        int localRowNo = rowNo;
                        if (e.CandidatesLeft > 0)
                        {
                            visibleRows++;
                            TextConflict tc = e;
                            <tr class="align-middle">
                                <td class="text-truncate twa-long-text @CssRowClass(tc)">@e.SrcText</td>
                                @if (ShowNumbers)
                                {
                                    <td scope="row" class="text-end"><a class="text-decoration-none">@e.WorkId</a></td>
                                }
                                <td class="text-end @CssRowClass(tc)">
                                    <button class="btn btn-sm btn-primary" @onclick="@(() => PickRow(localRowNo))"><i class="bi bi-eye" /></button>
                                </td>
                            </tr>
                        }
                        rowNo++;
                        if (visibleRows > 4)
                            break;
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@if (textConflict != null && textConflict.CandidatesLeft > 0)
{
    <div class="card shadow mt-2">
        <div class="card-header">
            <span class="fw-bold">Alternative Translations</span>
            <span class="text-end" style="float:right;">Work Item #<b>@textConflict.WorkId</b></span>
        </div>

        @if (!statusMessageApprove.IsEmpty)
        {
            <div class="card-header">
                <StatusBox StatusMessage="statusMessageApprove" />
            </div>
        }

        <div class="card-body">

            @if (textConflict != null)
            {
                <table class="table table-sm">
                    <thead>
                        <tr class="bg-primary-subtle">
                            <td class="bg-primary-subtle" colspan="2">
                                @textConflict.SrcText
                            </td>
                            @if (ShowNumbers)
                            {
                                <td class="text-sm-end">
                                    @textConflict.WorkId
                                </td>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var e in textConflict.Candidate)
                        {
                            if (!e.Discarded)
                            {
                                <tr class="align-middle">
                                    <td>@e.RawText <span class="text-muted small fst-italic">-&nbsp;@e.UserName</span></td>
                                    @if (ShowNumbers)
                                    {
                                        <td class="text-sm-end"><a class="text-decoration-none">@e.BlockId</a></td>
                                    }
                                    <td class="text-end">
                                        <button title="@e.UserName" class="btn btn-sm btn-success" @onclick="@(() => PickBlock(e.BlockId))"><i class="bi bi-check2-circle" /></button>
                                        <button title="@e.UserName" class="btn btn-sm btn-warning" @onclick="@(() => DiscardBlock(e.BlockId))"><i class="bi bi-trash" /></button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }

        </div>
    </div>
}


@code {
    private Disagreements allConflicts = new();
    private TextConflict? textConflict;
    private int SelectedItemIndex;
    private bool ShowNumbers = false;
    private bool StartClicked = false;
    private bool QueryIsRunning = false;
    private int rowNo = 0;

    private string CssRowClass(TextConflict conflict)
    {
        if (textConflict != null && conflict.RowKey == textConflict.RowKey)
            return "bg-primary-subtle";
        else
            return "";
    }

    private async Task ClickStart()
    {
        StartClicked = true;
        await RunQuery();
    }

    private void PickRow(int rowNo)
    {
        textConflict = allConflicts.Items[rowNo];
    }

    private void PickFirst()
    {
        if (allConflicts.Items.Count > 0)
        {
            SelectedItemIndex = 0;
            textConflict = allConflicts.Items[0];
            statusMessage.Clear();
        }
        else
        {
            statusMessage.SetSuccess("No more conflicts", "There are no translation conflicts for the selected project and language");
            SelectedItemIndex = -1;
            textConflict = null;
        }
    }

    private async Task PickBlock(int blockId)
    {
        statusMessageApprove.Clear();
        if (textConflict == null) return;
        foreach (var c in textConflict.Candidate)
            if (c.BlockId == blockId)
                c.Approved = true;
            else if (c.BlockId != blockId && !c.Discarded)
                await DiscardBlock(c.BlockId);
    }

    private async Task DiscardBlock(int blockId)
    {
        statusMessageApprove.Clear();
        try
        {
            if (textConflict == null) return;
            await data.DiscardBlock(blockId);
            if (textConflict.DiscardBlock(blockId) == 0)
                PickFirst();
        }
        catch (Exception e)
        {
            statusMessageApprove.SetException(e);
        }
    }

    private async Task RunQuery()
    {
        if (QueryIsRunning) return;
        QueryIsRunning = true;
        statusMessageApprove.Clear();
        statusMessage.SetInformation("Loading data ...", "Retrieving a list of conflicts for you to resolve.  Please wait for this message to disappear.");
        if (!StartClicked) return;
        try
        {
            if (!appUser.IsAuthenticated)
                throw new UnauthorizedAccessException("You need to be signed in and authorized for this application.");
            else
                allConflicts = await data.GetDisagreements(data.ProjectId, data.TargetLanguage);
            PickFirst();
        }
        catch (Exception e)
        {
            statusMessage.SetException(e);
        }
        QueryIsRunning = false;
        StateHasChanged();
    }

}
