@page "/"

@using TranslateWebApp.Interfaces

@implements IObserver

@inject ILogger<Home> logger
@inject IWebUser appUser
@inject ITransFactory transFactory
@inject IStatusMessage statusMessage
@inject IAppState appState
@inject IDataContext data

<PageTitle>Translation Work</PageTitle>

<MenuBar />

<AuthorizeView>
    <Authorized>

        <div class="card shadow mt-2">

            <div class="card-header">
                <span class="fw-bold">
                    <InputCheckbox @bind-Value="ShowSettings" class="form-check-inline me-2" />Show Project Settings
                </span>
                <span style="float:right;">Welcome: <b>@appUser.FirstName</b> @appUser.LogTo</span>
            </div>

            <div class="card-body">
                @if (appState.CallsTranslations == 0)
                {
                    <div class="text-center w-100">
                        <div class="mb-2">
                            Each user is assigned a set of projects and target languages.<br />
                            Click the button below to load your projects and languages.
                        </div>
                        <button class="btn btn-primary" @onclick="@(() => RunQuery())">Start Working</button>
                    </div>
                }
                else if (ShowSettings)
                {
                    <div class="mb-2 py-3">
                        Choose your project, target language and support language.
                        The support language should be a manual translation and can be used to resolve ambiguities in the source language.
                        The support languages may not be available in all projects.
                    </div>
                    <ProjectControl OnClick="RunQuery" />
                    <LanguageControl OnClick="RunQuery" ShowHelper=true />
                }
            </div>

            <div class="card-footer">
                <div class="progress" style="height: 24px;">
                    <div class="progress-bar" role="progressbar" style="width: @(TextPercentDone)%;" aria-valuenow="@(TextPercentDone)" aria-valuemin="0" aria-valuemax="100">@(TextPercentDone)%</div>
                </div>
            </div>

        </div>

        @if (appState.CallsTranslations > 0)
        {
            <div class="card shadow mt-2">
                <div class="card-header">Find Work</div>
                <div class="card-body">

                    @if (appState.Translations.Count == 0 && appState.CallsTranslations > 0)
                    {
                        ShowSettings = true;
                        <div>
                            There is no more work for you with the current settings.
                            You may find more work in other projects or with other target languages.
                        </div>
                    }
                    else
                    {
                        <div>
                            You get @(appState.Translations.Count) text blocks to work with at a time.  When you are done, get more work by clicking on three dots. <i class="bi bi-three-dots" />
                        </div>
                        <div class="btn-group w-100 mt-2">
                            <button class="btn btn-sm btn-secondary disabled twa-first-button">Text Block</button>
                            @{
                                int btnNo = 0;
                                foreach (var e in appState.Translations)
                                {
                                    int locBtnNo = btnNo;
                                    <button class="btn btn-sm @CssClassButton(btnNo, e)" @onclick="@(() => SelectItem(locBtnNo))" title="@e.WorkId">@(locBtnNo + 1)</button>
                                    btnNo++;
                                }
                            }
                            <button class="btn btn-sm btn-primary" @onclick="@(() => RunQuery())"><i class="bi bi-three-dots" /></button>
                        </div>
                    }

                </div>
            </div>
        }

        <div>

            @if (workItem != null)
            {
                <div class="card shadow mt-2">
                    <div class="card-header">
                        English - Original Language
                        <span class="twa-work-item">@workItem.RowKey</span>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            @workItem.Src1Text
                        </div>
                    </div>
                </div>

                @if (data.HelperLanguage != "xx" && !string.IsNullOrEmpty(workItem.Src2Text))
                {
                    <div class="card shadow mt-2">
                        <div class="card-header">
                            @(workItem.HelpLanguage) - <span class="@CssClassSecondaryTranslation()">@GetSecondaryTextWarning()</span>
                        </div>
                        <div class="card-body">
                            <div class="card-text">
                                @workItem.Src2Text
                            </div>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(workItem.WorkAi))
                {
                    <div class="card shadow mt-2">
                        <div class="card-header">@(workItem.WorkLanguage) - Machine Translation</div>
                        <div class="card-body">
                            <div class="card-text">
                                @workItem.WorkAi
                            </div>
                        </div>
                        <div class="card-footer">
                            <span style="float: right;">
                                <button class="btn btn-sm btn-primary" @onclick="@(() => EditText())"><i class="bi bi-pencil-fill me-2" />Edit</button>
                                <button class="btn btn-sm btn-success" @onclick="@(() => ApproveAiText())">Approve</button>
                            </span>
                        </div>
                    </div>
                }

                @if ((!string.IsNullOrEmpty(workItem.WorkFinal) || string.IsNullOrEmpty(workItem.WorkAi)) && !IsSaving)
                {
                    <div class="card shadow mt-2">
                        <div class="card-header">
                            @(workItem.WorkLanguage) - Manual Translation
                            <span style="float: right;">
                                <button class="btn btn-sm btn-primary btn-translate" @onclick="@(() => TranslateText("Azure"))"><i class="bi bi-microsoft me-2" />Azure</button>
                                <button class="btn btn-sm btn-primary btn-translate" @onclick="@(() => TranslateText("DeepL"))"><i class="bi bi-translate me-2" />DeepL</button>
                                <button class="btn btn-sm btn-primary btn-translate" @onclick="@(() => TranslateText("Lara"))"><i class="bi bi-translate me-2" />Lara</button>
                            </span>
                        </div>
                        <div class="card-body">
                            <InputTextArea @bind-Value="@workItem.WorkFinal" class="form-control manual-edit" />
                        </div>
                        @if (!statusMessage.IsEmpty)
                        {
                            <div class="ms-3 me-3 mb-3">
                                <StatusBox StatusMessage="@statusMessage" />
                            </div>
                        }
                        <div class="card-footer">
                            <span style="float: right;">
                                <button class="btn btn-sm btn-success" @onclick="@(() => ApproveManualText())"><i class="bi bi-check-circle-fill me-2" />Approve</button>
                            </span>
                        </div>
                    </div>
                }
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {

    private string TextPercentDone { get => $"{data.PercentDone():F0}"; }

    private string CssClassButton(int btnNo, WorkItem? workItem)
    {
        string btnClass = "btn-success";
        if (workItem?.IsApproved == false)
            btnClass = btnClass.Replace("success", "outline-primary");
        if (btnNo == SelectedItemIndex)
            btnClass = btnClass.Replace("outline-", "") + " active text-bold";
        return btnClass;
    }

    private string CssClassSecondaryTranslation()
    {
        switch (workItem?.Src2Machine)
        {
            case true: return "sectext-machine";
            case false: return "sectext-manual";
            default: return "sectext-none";
        }
    }

    private string GetSecondaryTextWarning()
    {
        switch (workItem?.Src2Machine)
        {
            case true: return "Machine Translation";
            case false: return "Manual Translation";
            default: return "No Translation";
        }
    }


}
